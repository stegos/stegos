on:
  push:
    tags:
      - '!refs/tags/*'
    branches:
      - 'actions'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [ubuntu, macos]
        include:
          - build: ubuntu
            os: ubuntu-16.04
            rust: nightly
            target: x86_64-unknown-linux-gnu
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
    steps:
      # Checkout the source code
      - uses: actions/checkout@v2

      # - name: Cache Cargo registry
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.cargo/registry
      #     key: ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-

      # - name: Cache Cargo index
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.cargo/git
      #     key: ${{ runner.os }}-${{ matrix.rust }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-${{ matrix.rust }}-cargo-index-

      - name: Cache Cargo build debug artifacts
        uses: actions/cache@v1
        with:
          path: target/debug
          key: ${{ runner.os }}-${{ matrix.rust }}-debug-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-debug-target-

      - name: Cache Cargo build release artifacts
        uses: actions/cache@v1
        with:
          path: target/release
          key: ${{ runner.os }}-${{ matrix.rust }}-release-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-release-target-

      # Install Debian libs
      - name: Install missing packages
        if: matrix.build == 'debian'
        run: |
          sudo apt-get install -y binutils-dev build-essential libc6-dev-i386 m4 clang curl git
          sudo apt-get install -y gzip libiberty-dev libssl-dev openjdk-8-jdk-headless
          sudo apt-get install pkg-config tar zip zlib1g-dev

      - name: Install the Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true 
          components: rustfmt clippy
# Set these for the following build stages
# export CFLAGS="-O3 -mtune=generic -g -fexceptions -funwind-tables -fno-omit-frame-pointer -fPIC"
# export CXXFLAGS="$CFLAGS"

      - name: Build all
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-features --all

### These should be in a separate job 

      - name: Test all
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --all

      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings          

      - name: Audit
        uses: actions-rs/cargo@v1
        with:
          command: audit
          args: -- -D warnings          

      - name: Check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
