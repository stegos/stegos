syntax = "proto3";
package stegos.blockchain;

import "crypto.proto";
import "view_changes.proto";

message PaymentOutput {
    stegos.crypto.PublicKey recipient = 1;
    stegos.crypto.BulletProof proof = 2;
    stegos.crypto.Pt check = 3;
    stegos.crypto.EncryptedPayload payload = 4;
    stegos.crypto.SchnorrSig body_signature = 5;
}

message StakeOutput {
    stegos.crypto.PublicKey recipient = 1;
    stegos.crypto.SecurePublicKey validator = 2;
    stegos.crypto.SecureSignature signature = 3;
    int64 amount = 4;
    stegos.crypto.Pt commitment = 5;
    stegos.crypto.Pt check = 6;
    stegos.crypto.EncryptedPayload payload = 7;
    stegos.crypto.SchnorrSig body_signature = 8;
}

message Output {
    oneof output {
        PaymentOutput payment_output = 1;
        StakeOutput stake_output = 3;
    }
}

message Transaction {
    repeated stegos.crypto.Hash txins = 1;
    repeated Output txouts = 2;
    stegos.crypto.Fr gamma = 3;
    int64 fee = 4;
    stegos.crypto.SchnorrSig sig = 5;
}

message BaseBlockHeader {
    uint64 version = 1;
    stegos.crypto.Hash previous = 2;
    uint64 height = 3;
    uint32 view_change = 4;
    uint64 timestamp = 5;
}

message MicroBlockHeader {
    BaseBlockHeader base = 1;
    stegos.crypto.Fr gamma = 2;
    int64 monetary_adjustment = 3;
    stegos.crypto.Hash inputs_range_hash = 4;
    stegos.crypto.Hash outputs_range_hash = 5;
    ViewChangeProof proof = 6;
}

message MerkleNode {
    stegos.crypto.Hash hash = 1;
    uint64 left = 2;
    uint64 right = 3;
    Output value = 4;
}

message MicroBlockBody {
    stegos.crypto.SecureSignature sig = 1;
    repeated stegos.crypto.Hash inputs = 2;
    repeated MerkleNode outputs = 3;
}

message MicroBlock {
    MicroBlockHeader header = 1;
    MicroBlockBody body = 2;
}

message KeyBlockHeader {
    BaseBlockHeader base = 1;
    stegos.crypto.VRF random = 2;
}

message KeyBlockBody {
    stegos.crypto.SecureSignature sig = 1;
    repeated bool sigmap = 2;
}

message KeyBlock {
    KeyBlockHeader header = 1;
    KeyBlockBody body = 2;
}

message Block {
    oneof block {
        KeyBlock key_block = 1;
        MicroBlock micro_block = 2;
    }
}