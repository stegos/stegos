//! Genesis Block.

//
// Copyright (c) 2018 Stegos
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

use block::*;
use input::*;
use merkle::MerklePath;
use output::*;
use payload::EncryptedPayload;
use stegos_crypto::bulletproofs;
use stegos_crypto::hash::Hash;
use stegos_crypto::pbc::fast::Zr;
use stegos_crypto::pbc::secure::*;

/// Genesis block for tests and development purposes.
pub fn genesis_dev() -> (Block, Vec<MerklePath>) {
    // Generated by make_deterministic_keys(b"dev")
    static SECKEY_HEX: &str = "daeed6308874de11ec5ba896aff636aee60821b397f88164be3eae5cf6d276d8";
    static PKEY_HEX: &str = "bd2f2d45a439eafb3523216a652344883b3930f634a8c6e72eda55ff1f8670f9c90f139d9f9a486c6def760d2ff4e74d1f468c848c9774e63cdd0d46917eefe401";
    static SIG_HEX: &str = "e66057526bb58fdd5ba60a2f640c13667fbbae901fe503c7412ddfe651ac075a00";
    // Some random number
    static DELTA_HEX: &str = "72598ec9469e62651b4bad2b9f4a03c93ba8e00d";
    // SHA3-256("dev")
    static PREVIOUS_HEX: &str = "daeed6308874de11ec5ba896aff636aee60821b397f88164be3eae5cf6d276d8";

    let version: u64 = 1;
    let amount: i64 = 1_000_000;
    let epoch: u64 = 1;
    let previous = Hash::from_str(PREVIOUS_HEX).expect("hex");
    let skey = SecretKey::from_str(SECKEY_HEX).expect("hex");
    let pkey = PublicKey::from_str(PKEY_HEX).expect("hex");
    let _sig = Signature::from_str(SIG_HEX).expect("hex");
    let delta: Zr = Zr::from_str(DELTA_HEX).expect("hex");
    let leader = pkey;

    // Genesis is self-signed.
    let witnesses = [leader.clone()];

    // Recipient is ourselves.
    let recipient = leader.clone();

    // Genesis block doesn't have inputs.
    let inputs: [Input; 0] = [];

    // Genesis block have one hard-coded output.
    let (proof, gamma) = bulletproofs::make_range_proof(amount);
    let payload = EncryptedPayload::new_payment(delta, gamma, amount, pkey);
    let output = Output::new(recipient, proof, payload);
    let outputs = [output];

    Block::sign(
        &skey, version, epoch, previous, leader, delta, &witnesses, &inputs, &outputs,
    )
}
