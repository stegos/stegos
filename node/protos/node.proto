syntax = "proto3";
package protobuf.pb;

message Pt {
    bytes data = 1;
}

message Fr {
    bytes data = 1;
}

message G1 {
    bytes data = 1;
}

message G2 {
    bytes data = 1;
}

message Hash {
    bytes data = 1;
}

message PublicKey {
    Pt point = 1;
}

message SchnorrSig {
    Fr u = 1;
    Pt K = 2;
}

message SecurePublicKey {
    G2 point = 1;
}

message SecureSignature {
    G1 point = 1;
}

message EncryptedPayload {
    Pt apkg = 1;
    Pt ag = 2;
    bytes ctxt = 3;
}

message LR {
    Fr x = 1;
    Pt l = 2;
    Pt r = 3;
};

message DotProof {
    Pt u = 1;
    Pt pcmt = 2;
    Fr a = 3;
    Fr b = 4;
    repeated LR xlrs = 5;
};

message BulletProof {
    Pt vcmt = 1;
    Pt acmt = 2;
    Pt scmt = 3;
    Pt t1_cmt = 4;
    Pt t2_cmt = 5;
    Fr tau_x = 6;
    Fr mu = 7;
    Fr t_hat = 8;
    DotProof dot_proof = 9;
    Fr x = 10;
    Fr y = 11;
    Fr z = 12;
}

message Output {
    PublicKey recipient = 1;
    BulletProof proof = 2;
    Pt vcmt = 4;
    uint64 ttl = 5;
    EncryptedPayload payload = 3;
}

message Transaction {
    repeated Hash txins = 1;
    repeated Output txouts = 2;
    Fr gamma = 3;
    int64 fee = 4;
    SchnorrSig sig = 5;
}

message BaseBlockHeader {
    uint64 version = 1;
    Hash previous = 2;
    uint64 epoch = 3;
    uint64 timestamp = 4;
    SecureSignature sig = 5;
    repeated bool sigmap = 6;
}

message MonetaryBlockHeader {
    BaseBlockHeader base = 1;
    Fr gamma = 2;
    Hash inputs_range_hash = 3;
    Hash outputs_range_hash = 4;
}

message MerkleNode {
    Hash hash = 1;
    uint64 left = 2;
    uint64 right = 3;
    Output value = 4;
}

message MonetaryBlockBody {
    repeated Hash inputs = 1;
    repeated MerkleNode outputs = 2;
}

message MonetaryBlock {
    MonetaryBlockHeader header = 1;
    MonetaryBlockBody body = 2;
}

message KeyBlockHeader {
    BaseBlockHeader base = 1;
    SecurePublicKey leader = 2;
    repeated SecurePublicKey witnesses = 3;
}

message KeyBlock {
    KeyBlockHeader header = 1;
}

message Block {
    oneof block {
        KeyBlock key_block = 1;
        MonetaryBlock monetary_block = 2;
    }
}

message KeyBlockProposal {
    KeyBlock block = 1;
}

message MonetaryBlockProposal {
    MonetaryBlock block = 1;
    Output fee_output = 2;
    Fr gamma = 3;
    repeated Hash tx_hashes = 4;
}

message Prevote {}

message Precommit {
    SecureSignature request_hash_sig = 1;
}

message ConsensusMessageBody {
    oneof body {
        Prevote prevote = 1;
        Precommit precommit= 2;

        KeyBlockProposal key_block_proposal = 11;
        MonetaryBlockProposal monetary_block_proposal = 12;
    }
}

message ConsensusMessage {
    uint64 height = 1;
    uint64 epoch = 2;
    Hash request_hash = 3;
    ConsensusMessageBody body = 4;
    SecurePublicKey pkey = 5;
    SecureSignature sig = 6;
}

message SealedBlockMessage {
    Block block = 1;
    SecurePublicKey pkey = 2;
    SecureSignature sig = 3;
}

message VRF {
    Hash rand = 1;
    G1 proof = 2;
}

message VRFTicket {
    VRF random = 1;
    SecurePublicKey pkey = 3;
    SecureSignature sig = 4;
}